// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SA21zZyIfCgdWZWN0b3IyEgkKAXgYASABKAISCQoBeRgC",
            "IAEoAiI+CgRBQUJCEgwKBG1pbngYASABKAISDAoEbWF4eBgCIAEoAhIMCgRt",
            "aW55GAMgASgCEgwKBG1heHkYBCABKAIicwoEQ2VsbBIMCgRuYW1lGAEgASgJ",
            "EhkKBmJvcmRlchgCIAEoCzIJLm1zZy5BQUJCEiAKDXN3aXRjaF9ib3JkZXIY",
            "AyABKAsyCS5tc2cuQUFCQhIgCg1taXJyb3JfYm9yZGVyGAQgASgLMgkubXNn",
            "LkFBQkIiTgoKUGxheWVyRGF0YRIKCgJpZBgBIAEoBRIZCgNwb3MYAiABKAsy",
            "DC5tc2cuVmVjdG9yMhIZCgN2ZWwYAyABKAsyDC5tc2cuVmVjdG9yMiIZCgZD",
            "TG9naW4SDwoHYWNjb3VudBgBIAEoCSJJCgVDTW92ZRIKCgJpZBgBIAEoBRIZ",
            "CgNwb3MYAiABKAsyDC5tc2cuVmVjdG9yMhIZCgN2ZWwYAyABKAsyDC5tc2cu",
            "VmVjdG9yMiJhCgpTRW50ZXJDZWxsEh0KBHNlbGYYASABKAsyDy5tc2cuUGxh",
            "eWVyRGF0YRIXCgRjZWxsGAIgASgLMgkubXNnLkNlbGwSGwoIbmVpZ2hib3IY",
            "AyADKAsyCS5tc2cuQ2VsbCIfCgpTTGVhdmVDZWxsEhEKCWNlbGxfbmFtZRgB",
            "IAEoCSIlCgRTQWRkEh0KBGRhdGEYASADKAsyDy5tc2cuUGxheWVyRGF0YSIV",
            "CgdTUmVtb3ZlEgoKAmlkGAEgAygFIigKB1NVcGRhdGUSHQoEZGF0YRgBIAEo",
            "CzIPLm1zZy5QbGF5ZXJEYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Vector2), global::Msg.Vector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.AABB), global::Msg.AABB.Parser, new[]{ "Minx", "Maxx", "Miny", "Maxy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Cell), global::Msg.Cell.Parser, new[]{ "Name", "Border", "SwitchBorder", "MirrorBorder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.PlayerData), global::Msg.PlayerData.Parser, new[]{ "Id", "Pos", "Vel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CLogin), global::Msg.CLogin.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CMove), global::Msg.CMove.Parser, new[]{ "Id", "Pos", "Vel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SEnterCell), global::Msg.SEnterCell.Parser, new[]{ "Self", "Cell", "Neighbor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SLeaveCell), global::Msg.SLeaveCell.Parser, new[]{ "CellName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SAdd), global::Msg.SAdd.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRemove), global::Msg.SRemove.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUpdate), global::Msg.SUpdate.Parser, new[]{ "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector2 : pb::IMessage<Vector2> {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AABB : pb::IMessage<AABB> {
    private static readonly pb::MessageParser<AABB> _parser = new pb::MessageParser<AABB>(() => new AABB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AABB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABB(AABB other) : this() {
      minx_ = other.minx_;
      maxx_ = other.maxx_;
      miny_ = other.miny_;
      maxy_ = other.maxy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABB Clone() {
      return new AABB(this);
    }

    /// <summary>Field number for the "minx" field.</summary>
    public const int MinxFieldNumber = 1;
    private float minx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Minx {
      get { return minx_; }
      set {
        minx_ = value;
      }
    }

    /// <summary>Field number for the "maxx" field.</summary>
    public const int MaxxFieldNumber = 2;
    private float maxx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Maxx {
      get { return maxx_; }
      set {
        maxx_ = value;
      }
    }

    /// <summary>Field number for the "miny" field.</summary>
    public const int MinyFieldNumber = 3;
    private float miny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Miny {
      get { return miny_; }
      set {
        miny_ = value;
      }
    }

    /// <summary>Field number for the "maxy" field.</summary>
    public const int MaxyFieldNumber = 4;
    private float maxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Maxy {
      get { return maxy_; }
      set {
        maxy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AABB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AABB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Minx != other.Minx) return false;
      if (Maxx != other.Maxx) return false;
      if (Miny != other.Miny) return false;
      if (Maxy != other.Maxy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Minx != 0F) hash ^= Minx.GetHashCode();
      if (Maxx != 0F) hash ^= Maxx.GetHashCode();
      if (Miny != 0F) hash ^= Miny.GetHashCode();
      if (Maxy != 0F) hash ^= Maxy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Minx != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Minx);
      }
      if (Maxx != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Maxx);
      }
      if (Miny != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Miny);
      }
      if (Maxy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Maxy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Minx != 0F) {
        size += 1 + 4;
      }
      if (Maxx != 0F) {
        size += 1 + 4;
      }
      if (Miny != 0F) {
        size += 1 + 4;
      }
      if (Maxy != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AABB other) {
      if (other == null) {
        return;
      }
      if (other.Minx != 0F) {
        Minx = other.Minx;
      }
      if (other.Maxx != 0F) {
        Maxx = other.Maxx;
      }
      if (other.Miny != 0F) {
        Miny = other.Miny;
      }
      if (other.Maxy != 0F) {
        Maxy = other.Maxy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Minx = input.ReadFloat();
            break;
          }
          case 21: {
            Maxx = input.ReadFloat();
            break;
          }
          case 29: {
            Miny = input.ReadFloat();
            break;
          }
          case 37: {
            Maxy = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cell : pb::IMessage<Cell> {
    private static readonly pb::MessageParser<Cell> _parser = new pb::MessageParser<Cell>(() => new Cell());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cell(Cell other) : this() {
      name_ = other.name_;
      Border = other.border_ != null ? other.Border.Clone() : null;
      SwitchBorder = other.switchBorder_ != null ? other.SwitchBorder.Clone() : null;
      MirrorBorder = other.mirrorBorder_ != null ? other.MirrorBorder.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cell Clone() {
      return new Cell(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "border" field.</summary>
    public const int BorderFieldNumber = 2;
    private global::Msg.AABB border_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.AABB Border {
      get { return border_; }
      set {
        border_ = value;
      }
    }

    /// <summary>Field number for the "switch_border" field.</summary>
    public const int SwitchBorderFieldNumber = 3;
    private global::Msg.AABB switchBorder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.AABB SwitchBorder {
      get { return switchBorder_; }
      set {
        switchBorder_ = value;
      }
    }

    /// <summary>Field number for the "mirror_border" field.</summary>
    public const int MirrorBorderFieldNumber = 4;
    private global::Msg.AABB mirrorBorder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.AABB MirrorBorder {
      get { return mirrorBorder_; }
      set {
        mirrorBorder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Border, other.Border)) return false;
      if (!object.Equals(SwitchBorder, other.SwitchBorder)) return false;
      if (!object.Equals(MirrorBorder, other.MirrorBorder)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (border_ != null) hash ^= Border.GetHashCode();
      if (switchBorder_ != null) hash ^= SwitchBorder.GetHashCode();
      if (mirrorBorder_ != null) hash ^= MirrorBorder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (border_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Border);
      }
      if (switchBorder_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SwitchBorder);
      }
      if (mirrorBorder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MirrorBorder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (border_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Border);
      }
      if (switchBorder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchBorder);
      }
      if (mirrorBorder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MirrorBorder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cell other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.border_ != null) {
        if (border_ == null) {
          border_ = new global::Msg.AABB();
        }
        Border.MergeFrom(other.Border);
      }
      if (other.switchBorder_ != null) {
        if (switchBorder_ == null) {
          switchBorder_ = new global::Msg.AABB();
        }
        SwitchBorder.MergeFrom(other.SwitchBorder);
      }
      if (other.mirrorBorder_ != null) {
        if (mirrorBorder_ == null) {
          mirrorBorder_ = new global::Msg.AABB();
        }
        MirrorBorder.MergeFrom(other.MirrorBorder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (border_ == null) {
              border_ = new global::Msg.AABB();
            }
            input.ReadMessage(border_);
            break;
          }
          case 26: {
            if (switchBorder_ == null) {
              switchBorder_ = new global::Msg.AABB();
            }
            input.ReadMessage(switchBorder_);
            break;
          }
          case 34: {
            if (mirrorBorder_ == null) {
              mirrorBorder_ = new global::Msg.AABB();
            }
            input.ReadMessage(mirrorBorder_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      id_ = other.id_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Vel = other.vel_ != null ? other.Vel.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Msg.Vector2 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "vel" field.</summary>
    public const int VelFieldNumber = 3;
    private global::Msg.Vector2 vel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector2 Vel {
      get { return vel_; }
      set {
        vel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Vel, other.Vel)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (vel_ != null) hash ^= Vel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (vel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (vel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Msg.Vector2();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.vel_ != null) {
        if (vel_ == null) {
          vel_ = new global::Msg.Vector2();
        }
        Vel.MergeFrom(other.Vel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Msg.Vector2();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (vel_ == null) {
              vel_ = new global::Msg.Vector2();
            }
            input.ReadMessage(vel_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CLogin : pb::IMessage<CLogin> {
    private static readonly pb::MessageParser<CLogin> _parser = new pb::MessageParser<CLogin>(() => new CLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLogin(CLogin other) : this() {
      account_ = other.account_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLogin Clone() {
      return new CLogin(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLogin other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMove : pb::IMessage<CMove> {
    private static readonly pb::MessageParser<CMove> _parser = new pb::MessageParser<CMove>(() => new CMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMove(CMove other) : this() {
      id_ = other.id_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Vel = other.vel_ != null ? other.Vel.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMove Clone() {
      return new CMove(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Msg.Vector2 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "vel" field.</summary>
    public const int VelFieldNumber = 3;
    private global::Msg.Vector2 vel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector2 Vel {
      get { return vel_; }
      set {
        vel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Vel, other.Vel)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (vel_ != null) hash ^= Vel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (vel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (vel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMove other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Msg.Vector2();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.vel_ != null) {
        if (vel_ == null) {
          vel_ = new global::Msg.Vector2();
        }
        Vel.MergeFrom(other.Vel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Msg.Vector2();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (vel_ == null) {
              vel_ = new global::Msg.Vector2();
            }
            input.ReadMessage(vel_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SEnterCell : pb::IMessage<SEnterCell> {
    private static readonly pb::MessageParser<SEnterCell> _parser = new pb::MessageParser<SEnterCell>(() => new SEnterCell());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SEnterCell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEnterCell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEnterCell(SEnterCell other) : this() {
      Self = other.self_ != null ? other.Self.Clone() : null;
      Cell = other.cell_ != null ? other.Cell.Clone() : null;
      neighbor_ = other.neighbor_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEnterCell Clone() {
      return new SEnterCell(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private global::Msg.PlayerData self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.PlayerData Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "cell" field.</summary>
    public const int CellFieldNumber = 2;
    private global::Msg.Cell cell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Cell Cell {
      get { return cell_; }
      set {
        cell_ = value;
      }
    }

    /// <summary>Field number for the "neighbor" field.</summary>
    public const int NeighborFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.Cell> _repeated_neighbor_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.Cell.Parser);
    private readonly pbc::RepeatedField<global::Msg.Cell> neighbor_ = new pbc::RepeatedField<global::Msg.Cell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Cell> Neighbor {
      get { return neighbor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SEnterCell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SEnterCell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Self, other.Self)) return false;
      if (!object.Equals(Cell, other.Cell)) return false;
      if(!neighbor_.Equals(other.neighbor_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_ != null) hash ^= Self.GetHashCode();
      if (cell_ != null) hash ^= Cell.GetHashCode();
      hash ^= neighbor_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Self);
      }
      if (cell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cell);
      }
      neighbor_.WriteTo(output, _repeated_neighbor_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (cell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cell);
      }
      size += neighbor_.CalculateSize(_repeated_neighbor_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SEnterCell other) {
      if (other == null) {
        return;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Msg.PlayerData();
        }
        Self.MergeFrom(other.Self);
      }
      if (other.cell_ != null) {
        if (cell_ == null) {
          cell_ = new global::Msg.Cell();
        }
        Cell.MergeFrom(other.Cell);
      }
      neighbor_.Add(other.neighbor_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (self_ == null) {
              self_ = new global::Msg.PlayerData();
            }
            input.ReadMessage(self_);
            break;
          }
          case 18: {
            if (cell_ == null) {
              cell_ = new global::Msg.Cell();
            }
            input.ReadMessage(cell_);
            break;
          }
          case 26: {
            neighbor_.AddEntriesFrom(input, _repeated_neighbor_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SLeaveCell : pb::IMessage<SLeaveCell> {
    private static readonly pb::MessageParser<SLeaveCell> _parser = new pb::MessageParser<SLeaveCell>(() => new SLeaveCell());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLeaveCell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeaveCell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeaveCell(SLeaveCell other) : this() {
      cellName_ = other.cellName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeaveCell Clone() {
      return new SLeaveCell(this);
    }

    /// <summary>Field number for the "cell_name" field.</summary>
    public const int CellNameFieldNumber = 1;
    private string cellName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellName {
      get { return cellName_; }
      set {
        cellName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLeaveCell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLeaveCell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellName != other.CellName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellName.Length != 0) hash ^= CellName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CellName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLeaveCell other) {
      if (other == null) {
        return;
      }
      if (other.CellName.Length != 0) {
        CellName = other.CellName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CellName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SAdd : pb::IMessage<SAdd> {
    private static readonly pb::MessageParser<SAdd> _parser = new pb::MessageParser<SAdd>(() => new SAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAdd(SAdd other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAdd Clone() {
      return new SAdd(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.PlayerData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.PlayerData.Parser);
    private readonly pbc::RepeatedField<global::Msg.PlayerData> data_ = new pbc::RepeatedField<global::Msg.PlayerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.PlayerData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SAdd other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SRemove : pb::IMessage<SRemove> {
    private static readonly pb::MessageParser<SRemove> _parser = new pb::MessageParser<SRemove>(() => new SRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRemove(SRemove other) : this() {
      id_ = other.id_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRemove Clone() {
      return new SRemove(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_id_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRemove other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SUpdate : pb::IMessage<SUpdate> {
    private static readonly pb::MessageParser<SUpdate> _parser = new pb::MessageParser<SUpdate>(() => new SUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUpdate(SUpdate other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUpdate Clone() {
      return new SUpdate(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Msg.PlayerData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.PlayerData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUpdate other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Msg.PlayerData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Msg.PlayerData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
